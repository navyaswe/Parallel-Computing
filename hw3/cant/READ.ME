s homework involves implementing parallel sparse matrix-vector multiply (SpMV) on CPUs using OpenMP.

1) If you didn't understand what this is from the lecture, please read 
Section 3 of https://www.nvidia.com/docs/IO/77944/sc09-spmv-throughput.pdf
You will need to understand how COO and CSR formats work.
You can also email me or drop by my office hour to ask questions.

2) Implement three functions -
  a) convert_coo_to_csr - converts COO format to CSR format
  b) spmv_coo - calculates SpMV using the COO format in parallel using OpenMP
  c) spmv - calculates SpMV using the CSR format in parallel using OpenMP
  d) spmv_coo_serial - serial version
  e) spmv_serial - serial version

3)  Test your code on the 'cant' matrix and make sure the answer matches the provided anwer. There are a few things of note:
  a) Your answer may be off by a very small amount (e.g., < 10^-6). Use 'diff' against cant/ans.mtx
  b) The input indices start from 1 (instead of 0). You should make sure that your code operates on 0-index since arrays start from index 0 in C/C++.
  c) Example usage is: ./spmv cant/cant.mtx cant/b.mtx ./myans.mtx 
     Then: diff ./myans.mtx cant/ans.mtx
    
4) Discuss the performance of the two implementations with each other, and against their serial implementations, based on the input in the 'cant' directory and write up a report.

5) This homework will be due on November 8th, 11:59 PM.

